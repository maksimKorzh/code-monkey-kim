ca65 V2.18 - Git 2acb3b15
Main file   : wozmon.s
Current file: wozmon.s

000000r 1               ;  The WOZ Monitor for the Apple 1
000000r 1               ;  Written by Steve Wozniak in 1976
000000r 1               
000000r 1               
000000r 1               ; Page 0 Variables
000000r 1               
000000r 1               XAML            = $24           ;  Last "opened" location Low
000000r 1               XAMH            = $25           ;  Last "opened" location High
000000r 1               STL             = $26           ;  Store address Low
000000r 1               STH             = $27           ;  Store address High
000000r 1               L               = $28           ;  Hex value parsing Low
000000r 1               H               = $29           ;  Hex value parsing High
000000r 1               YSAV            = $2A           ;  Used to see if hex value is given
000000r 1               MODE            = $2B           ;  $00=XAM, $7F=STOR, $AE=BLOCK XAM
000000r 1               
000000r 1               
000000r 1               ; Other Variables
000000r 1               
000000r 1               IN              = $0200         ;  Input buffer to $027F
000000r 1               KBD             = $D010         ;  PIA.A keyboard input
000000r 1               KBDCR           = $D011         ;  PIA.A keyboard control register
000000r 1               DSP             = $D012         ;  PIA.B display output register
000000r 1               DSPCR           = $D013         ;  PIA.B display control register
000000r 1               
000000r 1                              .org $FF00
00FF00  1                              .export RESET
00FF00  1               
00FF00  1  D8           RESET:          CLD             ; Clear decimal arithmetic mode.
00FF01  1  58                           CLI
00FF02  1  A0 7F                        LDY #$7F        ; Mask for DSP data direction register.
00FF04  1  8C 12 D0                     STY DSP         ; Set it up.
00FF07  1  A9 A7                        LDA #$A7        ; KBD and DSP control register mask.
00FF09  1  8D 11 D0                     STA KBDCR       ; Enable interrupts, set CA1, CB1, for
00FF0C  1  8D 13 D0                     STA DSPCR       ; positive edge sense/output mode.
00FF0F  1  C9 DF        NOTCR:          CMP #'_'+$80    ; "_"?
00FF11  1  F0 13                        BEQ BACKSPACE   ; Yes.
00FF13  1  C9 9B                        CMP #$9B        ; ESC?
00FF15  1  F0 03                        BEQ ESCAPE      ; Yes.
00FF17  1  C8                           INY             ; Advance text index.
00FF18  1  10 0F                        BPL NEXTCHAR    ; Auto ESC if > 127.
00FF1A  1  A9 DC        ESCAPE:         LDA #'\'+$80    ; "\".
00FF1C  1  20 EF FF                     JSR ECHO        ; Output it.
00FF1F  1  A9 8D        GETLINE:        LDA #$8D        ; CR.
00FF21  1  20 EF FF                     JSR ECHO        ; Output it.
00FF24  1  A0 01                        LDY #$01        ; Initialize text index.
00FF26  1  88           BACKSPACE:      DEY             ; Back up text index.
00FF27  1  30 F6                        BMI GETLINE     ; Beyond start of line, reinitialize.
00FF29  1  AD 11 D0     NEXTCHAR:       LDA KBDCR       ; Key ready?
00FF2C  1  10 FB                        BPL NEXTCHAR    ; Loop until ready.
00FF2E  1  AD 10 D0                     LDA KBD         ; Load character. B7 should be ‘1’.
00FF31  1  99 00 02                     STA IN,Y        ; Add to text buffer.
00FF34  1  20 EF FF                     JSR ECHO        ; Display character.
00FF37  1  C9 8D                        CMP #$8D        ; CR?
00FF39  1  D0 D4                        BNE NOTCR       ; No.
00FF3B  1  A0 FF                        LDY #$FF        ; Reset text index.
00FF3D  1  A9 00                        LDA #$00        ; For XAM mode.
00FF3F  1  AA                           TAX             ; 0->X.
00FF40  1  0A           SETSTOR:        ASL             ; Leaves $7B if setting STOR mode.
00FF41  1  85 2B        SETMODE:        STA MODE        ; $00=XAM $7B=STOR $AE=BLOK XAM
00FF43  1  C8           BLSKIP:         INY             ; Advance text index.
00FF44  1  B9 00 02     NEXTITEM:       LDA IN,Y        ; Get character.
00FF47  1  C9 8D                        CMP #$8D        ; CR?
00FF49  1  F0 D4                        BEQ GETLINE     ; Yes, done this line.
00FF4B  1  C9 AE                        CMP #'.'+$80    ; "."?
00FF4D  1  90 F4                        BCC BLSKIP      ; Skip delimiter.
00FF4F  1  F0 F0                        BEQ SETMODE     ; Yes. Set STOR mode.
00FF51  1  C9 BA                        CMP #':'+$80    ; ":"?
00FF53  1  F0 EB                        BEQ SETSTOR     ; Yes. Set STOR mode.
00FF55  1  C9 D2                        CMP #'R'+$80    ; "R"?
00FF57  1  F0 3B                        BEQ RUN         ; Yes. Run user program.
00FF59  1  86 28                        STX L           ; $00-> L.
00FF5B  1  86 29                        STX H           ; and H.
00FF5D  1  84 2A                        STY YSAV        ; Save Y for comparison.
00FF5F  1  B9 00 02     NEXTHEX:        LDA IN,Y        ; Get character for hex test.
00FF62  1  49 B0                        EOR #$B0        ; Map digits to $0-9.
00FF64  1  C9 0A                        CMP #$0A        ; Digit?
00FF66  1  90 06                        BCC DIG         ; Yes.
00FF68  1  69 88                        ADC #$88        ; Map letter "A"-"F" to $FA-FF.
00FF6A  1  C9 FA                        CMP #$FA        ; Hex letter?
00FF6C  1  90 11                        BCC NOTHEX      ; No, character not hex.
00FF6E  1  0A           DIG:            ASL
00FF6F  1  0A                           ASL             ; Hex digit to MSD of A.
00FF70  1  0A                           ASL
00FF71  1  0A                           ASL
00FF72  1  A2 04                        LDX #$04        ; Shift count.
00FF74  1  0A           HEXSHIFT:       ASL             ; Hex digit left, MSB to carry.
00FF75  1  26 28                        ROL L           ; Rotate into LSD.
00FF77  1  26 29                        ROL H           ;  Rotate into MSD’s.
00FF79  1  CA                           DEX             ; Done 4 shifts?
00FF7A  1  D0 F8                        BNE HEXSHIFT    ; No, loop.
00FF7C  1  C8                           INY             ; Advance text index.
00FF7D  1  D0 E0                        BNE NEXTHEX     ; Always taken. Check next char for hex.
00FF7F  1  C4 2A        NOTHEX:         CPY YSAV        ; Check if L, H empty (no hex digits).
00FF81  1  F0 97                        BEQ ESCAPE      ; Yes, generate ESC sequence.
00FF83  1  24 2B                        BIT MODE        ; Test MODE byte.
00FF85  1  50 10                        BVC NOTSTOR     ;  B6=0 STOR 1 for XAM & BLOCK XAM
00FF87  1  A5 28                        LDA L           ; LSD’s of hex data.
00FF89  1  81 26                        STA (STL,X)     ; Store at current ‘store index’.
00FF8B  1  E6 26                        INC STL         ; Increment store index.
00FF8D  1  D0 B5                        BNE NEXTITEM    ; Get next item. (no carry).
00FF8F  1  E6 27                        INC STH         ; Add carry to ‘store index’ high order.
00FF91  1  4C 44 FF     TONEXTITEM:     JMP NEXTITEM    ; Get next command item.
00FF94  1  6C 24 00     RUN:            JMP (XAML)      ; Run at current XAM index.
00FF97  1  30 2B        NOTSTOR:        BMI XAMNEXT     ; B7=0 for XAM, 1 for BLOCK XAM.
00FF99  1  A2 02                        LDX #$02        ; Byte count.
00FF9B  1  B5 27        SETADR:         LDA L-1,X       ; Copy hex data to
00FF9D  1  95 25                        STA STL-1,X     ; ‘store index’.
00FF9F  1  95 23                        STA XAML-1,X    ; And to ‘XAM index’.
00FFA1  1  CA                           DEX             ; Next of 2 bytes.
00FFA2  1  D0 F7                        BNE SETADR      ; Loop unless X=0.
00FFA4  1  D0 14        NXTPRNT:        BNE PRDATA      ; NE means no address to print.
00FFA6  1  A9 8D                        LDA #$8D        ; CR.
00FFA8  1  20 EF FF                     JSR ECHO        ; Output it.
00FFAB  1  A5 25                        LDA XAMH        ; ‘Examine index’ high-order byte.
00FFAD  1  20 DC FF                     JSR PRBYTE      ; Output it in hex format.
00FFB0  1  A5 24                        LDA XAML        ; Low-order ‘examine index’ byte.
00FFB2  1  20 DC FF                     JSR PRBYTE      ; Output it in hex format.
00FFB5  1  A9 BA                        LDA #':'+$80    ; ":".
00FFB7  1  20 EF FF                     JSR ECHO        ; Output it.
00FFBA  1  A9 A0        PRDATA:         LDA #$A0        ; Blank.
00FFBC  1  20 EF FF                     JSR ECHO        ; Output it.
00FFBF  1  A1 24                        LDA (XAML,X)    ; Get data byte at ‘examine index’.
00FFC1  1  20 DC FF                     JSR PRBYTE      ; Output it in hex format.
00FFC4  1  86 2B        XAMNEXT:        STX MODE        ; 0->MODE (XAM mode).
00FFC6  1  A5 24                        LDA XAML
00FFC8  1  C5 28                        CMP L           ; Compare ‘examine index’ to hex data.
00FFCA  1  A5 25                        LDA XAMH
00FFCC  1  E5 29                        SBC H
00FFCE  1  B0 C1                        BCS TONEXTITEM  ; Not less, so no more data to output.
00FFD0  1  E6 24                        INC XAML
00FFD2  1  D0 02                        BNE MOD8CHK     ; Increment ‘examine index’.
00FFD4  1  E6 25                        INC XAMH
00FFD6  1  A5 24        MOD8CHK:        LDA XAML        ; Check low-order ‘examine index’ byte
00FFD8  1  29 07                        AND #$07        ; For MOD 8=0
00FFDA  1  10 C8                        BPL NXTPRNT     ; Always taken.
00FFDC  1  48           PRBYTE:         PHA             ; Save A for LSD.
00FFDD  1  4A                           LSR
00FFDE  1  4A                           LSR
00FFDF  1  4A                           LSR             ; MSD to LSD position.
00FFE0  1  4A                           LSR
00FFE1  1  20 E5 FF                     JSR PRHEX       ; Output hex digit.
00FFE4  1  68                           PLA             ; Restore A.
00FFE5  1  29 0F        PRHEX:          AND #$0F        ; Mask LSD for hex print.
00FFE7  1  09 B0                        ORA #'0'+$80    ; Add "0".
00FFE9  1  C9 BA                        CMP #$BA        ; Digit?
00FFEB  1  90 02                        BCC ECHO        ; Yes, output it.
00FFED  1  69 06                        ADC #$06        ; Add offset for letter.
00FFEF  1  2C 12 D0     ECHO:           BIT DSP         ; bit (B7) cleared yet?
00FFF2  1  30 FB                        BMI ECHO        ; No, wait for display.
00FFF4  1  8D 12 D0                     STA DSP         ; Output character. Sets DA.
00FFF7  1  60                           RTS             ; Return.
00FFF8  1               
00FFF8  1  00                           BRK             ; unused
00FFF9  1  00                           BRK             ; unused
00FFFA  1               
00FFFA  1               ; Interrupt Vectors
00FFFA  1               
00FFFA  1  00 0F                        .WORD $0F00     ; NMI
00FFFC  1  00 FF                        .WORD RESET     ; RESET
00FFFE  1  00 00                        .WORD $0000     ; BRK/IRQ
00FFFE  1               
